#!/usr/bin/env python
PACKAGE = "urban_road_filter"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# 1. 좌표 프레임 및 토픽 설정
gen.add("fixed_frame", str_t, 0, "Fixed frame. (Restart needed if it changes.)", "velodyne")
gen.add("topic_name", str_t, 0, "(Restart needed if it changes.)", "/velodyne_points")

# 2. 검출 알고리즘 활성화 플래그
gen.add("x_zero_method", bool_t, 0, "x zero method.", True)
gen.add("z_zero_method", bool_t, 0, "z zero method.", True)
gen.add("star_shaped_method", bool_t, 0, "star shaped method", True)
gen.add("blind_spots", bool_t, 0, "Filtering blind spots.", True)

# 3. X 방향 블라인드 스팟 필터링 옵션 (enum 사용)
size_enum = gen.enum([gen.const("bothX", int_t, 0, "Filtering in both negative and positive direction along the Lidars X axis"),
                      gen.const("positiveX", int_t, 1, "Filtering only in +X ."),
                      gen.const("negativeX", int_t, 2, "Filtering only in -X.")],
                     "Filtering blind spots in (+-,+,-) X direction.")
gen.add("xDirection", int_t, 0, "Filtering blind spots in (+-,+,-) X direction.", 0, 0, 2, edit_method=size_enum)

# 4. LIDAR 해상도 (VLP-32의 채널 간 간격 약 1.33°로 수정)
gen.add("interval", double_t, 0, "LIDAR's vertical resolution [deg]", 1.33, 0.0100, 10)

# 5. 커브(연석) 검출 관련 파라미터
gen.add("curb_height", double_t, 0, "Estimated minimum height of the curb [m].", 0.2, 0.0100, 0.5000)
gen.add("curb_points", int_t, 0, "Estimated number of points on the curb [pcs].", 5, 1, 30)
gen.add("beamZone", double_t, 0, "Width of the beam zone [deg].", 30, 10, 100)

# 6. 관심 영역 (ROI) 설정 (센서 좌표계 기준)
gen.add("min_x", double_t, 0, "Size of the examined area: Min X [m].", -10, -200, 200)
gen.add("max_x", double_t, 0, "Size of the examined area: Max X [m].", 20, -200, 200)
gen.add("min_y", double_t, 0, "Size of the examined area: Min Y [m].", -10, -200, 200)
gen.add("max_y", double_t, 0, "Size of the examined area: Max Y [m].", 10, -200, 200)

# 7. Z 영역 설정 (센서가 약 1m 위에 장착된 경우, 지면은 약 -1.0m)
gen.add("min_z", double_t, 0, "Size of the examined area: Min Z [m].", -1.5, -200, 200)
gen.add("max_z", double_t, 0, "Size of the examined area: Max Z [m].", 1.0, -200, 200)

# 8. 기하학적 필터링 파라미터
gen.add("cylinder_deg_x", double_t, 0, "The included angle of the examined triangle (three point) [deg]. - x_zero_method", 150, 0, 180)
gen.add("cylinder_deg_z", double_t, 0, "The included angle of the examined triangle (two vectors) [deg]. - z_zero_method", 140, 0, 180)
gen.add("curb_slope_deg", double_t, 0, "Radial threshold [deg]. - star_shaped_method", 50, 0, 180)

# 9. 분산 및 거리 계수
gen.add("kdev_param", double_t, 0, "Dispersion coefficient", 1.225, 0.5, 5)
gen.add("kdist_param", double_t, 0, "Distance coefficient", 2, 0.4, 10)

# 10. 별모양 빔 필터링 옵션
gen.add("starbeam_filter", bool_t, 0, "Use rectangular beams for detection (StarShaped)", False)

# 11. 최소 포인트 수 설정
gen.add("dmin_param", int_t, 0, "Min number of points for dispersion", 10, 3, 30)

# 12. 다각형 단순화 관련 파라미터
gen.add("simple_poly_allow", bool_t, 0, "Use simplified polygon (height data will be lost!)", True)
gen.add("poly_s_param", double_t, 0, "Coefficient of polygon simplification", 0.7, 0, 1)
# 센서가 1m 위에 있으므로, 지면(다각형 높이)은 센서 기준 약 -1.0m로 설정
gen.add("poly_z_manual", double_t, 0, "Set a constant polygon height", -1.0, -5, 5)
gen.add("poly_z_avg_allow", bool_t, 0, "Set polygon height to average value", True)

exit(gen.generate(PACKAGE, "urban_road_filter", "LidarFilters"))
